% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/treeman-declaration.R
\docType{data}
\name{TreeMan}
\alias{TreeMan}
\alias{essential_node_slots}
\title{TreeMan Class}
\format{\preformatted{ chr "id"
}}
\usage{
essential_node_slots
}
\description{
S4 Class for representing phylogenetic trees as a list of nodes.
}
\details{
A \code{TreeMan} object holds a list of nodes. The idea of the \code{TreeMan}
class is to make adding and removing nodes as similar as possible to adding
and removing elements in a list. Note that internal nodes and tips are
both considered nodes. Trees can be unrooted and polytomous.


Each node within the \code{TreeMan} \code{nodelist} contains the following data slots:
\itemize{
   \item \code{id}: character string for the node ID
   \item \code{taxonym}: name of taxonomic clade (optional)
   \item \code{span}: length of the preceding branch
   \item \code{prenode}: ID of the preceding node
   \item \code{postnode}: IDs of the connecting nodes
   \item \code{children}: descending tip IDs
   \item \code{pd}: phylogenetic diversity represented by node
   \item \code{predist}: prenode distance(distance to root if rooted or
   most distal tip if unrooted)
}
These data slots are updated whenever a node is modified, added or removed.

Currently available methods:
\itemize{
  \item \code{tips()}: list all tips
  \item \code{nodes()}: list all internal nodes
  \item \code{nTips()}: count all tips
  \item \code{nNodes()}: count all internal nodes
  \item \code{rootNode()}: return root node ID, NULL if unrooted
  \item \code{[[]]}: extract \code{Node}
  \item \code{pd()}: get total branch length of tree
  \item \code{age()}: get max root to tip distance
  \item \code{ultrmtrc()}: is ultrametric T/F
  \item \code{plytms()}: is polytomous T/F
  \item \code{extant()}: return extant tips
  \item \code{extinct()}: return extinct tips
  \item \code{setTol()}: set tolerance(default 1e-8)
}

See below in 'Examples' for these methods in use.
}
\examples{
library(treeman)
# Generate random tree
tree <- randTree(10)
# Print to get basic stats
print(tree)
# Currently available methods
tree['tips']  # return all tips IDs
tree['nodes']  # return all internal node IDs
tree['ntips']  # count all tips
tree['nnodes']  # count all internal nodes
tree['root']  # identify root node
tree[['t1']]  # return t1 node object
tree['pd']  # return phylogenetic diversity
tree['age']  # return age of tree
tree['ultr']  # is ultrametric?
tree['ply']  # is polytomous?
tree['ext']  # return all extant tip IDs
tree['exc']  # return all extinct tip IDs
tree <- setTol(tree, 10)  # reset tolerance, default 1e-8
# now tol is higher more tips will be classed as extant
tree['ext']
# Because all nodes are lists with metadata we can readily
#  get specific information on nodes of interest
node <- tree[['n2']]
print(node)
# And then use the same syntax for the tree
node['age']  # .... nchildren, pd, etc.
}
\seealso{
\code{\link{randTree}}
}
\keyword{datasets}

